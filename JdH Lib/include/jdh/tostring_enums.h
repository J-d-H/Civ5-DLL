#pragma once

#include "tostring.h"

#include <CvString.h>


namespace CvPreGame
{
	const CvString& nicknameDisplayed(PlayerTypes p);
}


namespace jdh
{
	TOSTRING_DECL(PlayerTypes, ePlayerId) {
		if (ePlayerId == NO_PLAYER)
		{
			buffer += "NO_PLAYER";
		}
		else if (0 <= ePlayerId && ePlayerId < MAX_PLAYERS)
		{
			buffer += szprintf("Player<%i>('%s')", ePlayerId, CvPreGame::nicknameDisplayed(ePlayerId).c_str());
		}
		else
		{
			buffer += szprintf("Player<%i>", ePlayerId);
		}
	}
	TOSTRING_DECL(DiplomacyPlayerType, eDiplomacyPlayer) {
		switch (eDiplomacyPlayer)
		{
		case DIPLO_ALL_PLAYERS: buffer += "ALL_PLAYERS"; break;
		case DIPLO_AI_PLAYERS: buffer += "AI_PLAYERS"; break;
		default:
			append(buffer, static_cast<PlayerTypes>(eDiplomacyPlayer));
		}
	}
	TOSTRING_DECL(FromUIDiploEventTypes, eEvent) {
		switch (eEvent) {
		case NO_FROM_UI_DIPLO_EVENT: buffer += "NO_FROM_UI_DIPLO_EVENT"; break;
		case FROM_UI_DIPLO_EVENT_HUMAN_DECLARES_WAR: buffer += "FROM_UI_DIPLO_EVENT_HUMAN_DECLARES_WAR"; break;
		case FROM_UI_DIPLO_EVENT_HUMAN_NEGOTIATE_PEACE: buffer += "FROM_UI_DIPLO_EVENT_HUMAN_NEGOTIATE_PEACE"; break;
		case FROM_UI_DIPLO_EVENT_HUMAN_WANTS_DISCUSSION: buffer += "FROM_UI_DIPLO_EVENT_HUMAN_WANTS_DISCUSSION"; break;
		case FROM_UI_DIPLO_EVENT_HUMAN_DISCUSSION_DONT_SETTLE: buffer += "FROM_UI_DIPLO_EVENT_HUMAN_DISCUSSION_DONT_SETTLE"; break;
		case FROM_UI_DIPLO_EVENT_HUMAN_DISCUSSION_WORK_WITH_US: buffer += "FROM_UI_DIPLO_EVENT_HUMAN_DISCUSSION_WORK_WITH_US"; break;
		case FROM_UI_DIPLO_EVENT_HUMAN_DISCUSSION_END_WORK_WITH_US: buffer += "FROM_UI_DIPLO_EVENT_HUMAN_DISCUSSION_END_WORK_WITH_US"; break;
		case FROM_UI_DIPLO_EVENT_DEMAND_HUMAN_REFUSAL: buffer += "FROM_UI_DIPLO_EVENT_DEMAND_HUMAN_REFUSAL"; break;
		case FROM_UI_DIPLO_EVENT_REQUEST_HUMAN_REFUSAL: buffer += "FROM_UI_DIPLO_EVENT_REQUEST_HUMAN_REFUSAL"; break;
		case FROM_UI_DIPLO_EVENT_AGGRESSIVE_MILITARY_WARNING_RESPONSE: buffer += "FROM_UI_DIPLO_EVENT_AGGRESSIVE_MILITARY_WARNING_RESPONSE"; break;
		case FROM_UI_DIPLO_EVENT_I_ATTACKED_YOUR_MINOR_CIV_RESPONSE: buffer += "FROM_UI_DIPLO_EVENT_I_ATTACKED_YOUR_MINOR_CIV_RESPONSE"; break;
		case FROM_UI_DIPLO_EVENT_I_BULLIED_YOUR_MINOR_CIV_RESPONSE: buffer += "FROM_UI_DIPLO_EVENT_I_BULLIED_YOUR_MINOR_CIV_RESPONSE"; break;
		case FROM_UI_DIPLO_EVENT_ATTACKED_MINOR_RESPONSE: buffer += "FROM_UI_DIPLO_EVENT_ATTACKED_MINOR_RESPONSE"; break;
		case FROM_UI_DIPLO_EVENT_KILLED_MINOR_RESPONSE: buffer += "FROM_UI_DIPLO_EVENT_KILLED_MINOR_RESPONSE"; break;
		case FROM_UI_DIPLO_EVENT_BULLIED_MINOR_RESPONSE: buffer += "FROM_UI_DIPLO_EVENT_BULLIED_MINOR_RESPONSE"; break;
		case FROM_UI_DIPLO_EVENT_EXPANSION_SERIOUS_WARNING_RESPONSE: buffer += "FROM_UI_DIPLO_EVENT_EXPANSION_SERIOUS_WARNING_RESPONSE"; break;
		case FROM_UI_DIPLO_EVENT_EXPANSION_WARNING_RESPONSE: buffer += "FROM_UI_DIPLO_EVENT_EXPANSION_WARNING_RESPONSE"; break;
		case FROM_UI_DIPLO_EVENT_PLOT_BUYING_SERIOUS_WARNING_RESPONSE: buffer += "FROM_UI_DIPLO_EVENT_PLOT_BUYING_SERIOUS_WARNING_RESPONSE"; break;
		case FROM_UI_DIPLO_EVENT_PLOT_BUYING_WARNING_RESPONSE: buffer += "FROM_UI_DIPLO_EVENT_PLOT_BUYING_WARNING_RESPONSE"; break;
		case FROM_UI_DIPLO_EVENT_WORK_WITH_US_RESPONSE: buffer += "FROM_UI_DIPLO_EVENT_WORK_WITH_US_RESPONSE"; break;
		case FROM_UI_DIPLO_EVENT_WORK_AGAINST_SOMEONE_RESPONSE: buffer += "FROM_UI_DIPLO_EVENT_WORK_AGAINST_SOMEONE_RESPONSE"; break;
		case FROM_UI_DIPLO_EVENT_DENOUNCE: buffer += "FROM_UI_DIPLO_EVENT_DENOUNCE"; break;
		case FROM_UI_DIPLO_EVENT_COOP_WAR_OFFER: buffer += "FROM_UI_DIPLO_EVENT_COOP_WAR_OFFER"; break;
		case FROM_UI_DIPLO_EVENT_COOP_WAR_RESPONSE: buffer += "FROM_UI_DIPLO_EVENT_COOP_WAR_RESPONSE"; break;
		case FROM_UI_DIPLO_EVENT_COOP_WAR_NOW_RESPONSE: buffer += "FROM_UI_DIPLO_EVENT_COOP_WAR_NOW_RESPONSE"; break;
		case FROM_UI_DIPLO_EVENT_HUMAN_DEMAND: buffer += "FROM_UI_DIPLO_EVENT_HUMAN_DEMAND"; break;
		case FROM_UI_DIPLO_EVENT_PLAN_RA_RESPONSE: buffer += "FROM_UI_DIPLO_EVENT_PLAN_RA_RESPONSE"; break;
			// Post Civ 5 release
		case FROM_UI_DIPLO_EVENT_AI_REQUEST_DENOUNCE_RESPONSE: buffer += "FROM_UI_DIPLO_EVENT_AI_REQUEST_DENOUNCE_RESPONSE"; break;
		case FROM_UI_DIPLO_EVENT_CAUGHT_YOUR_SPY_RESPONSE: buffer += "FROM_UI_DIPLO_EVENT_CAUGHT_YOUR_SPY_RESPONSE"; break;
		case FROM_UI_DIPLO_EVENT_KILLED_MY_SPY_RESPONSE: buffer += "FROM_UI_DIPLO_EVENT_KILLED_MY_SPY_RESPONSE"; break;
		case FROM_UI_DIPLO_EVENT_HUMAN_DISCUSSION_STOP_SPYING: buffer += "FROM_UI_DIPLO_EVENT_HUMAN_DISCUSSION_STOP_SPYING"; break;
		case FROM_UI_DIPLO_EVENT_HUMAN_DISCUSSION_SHARE_INTRIGUE: buffer += "FROM_UI_DIPLO_EVENT_HUMAN_DISCUSSION_SHARE_INTRIGUE"; break;
		case FROM_UI_DIPLO_EVENT_HUMAN_DISCUSSION_STOP_SPREADING_RELIGION: buffer += "FROM_UI_DIPLO_EVENT_HUMAN_DISCUSSION_STOP_SPREADING_RELIGION"; break;
		case FROM_UI_DIPLO_EVENT_STOP_CONVERSIONS: buffer += "FROM_UI_DIPLO_EVENT_STOP_CONVERSIONS"; break;
		case FROM_UI_DIPLO_EVENT_HUMAN_DISCUSSION_STOP_DIGGING: buffer += "FROM_UI_DIPLO_EVENT_HUMAN_DISCUSSION_STOP_DIGGING"; break;
		case FROM_UI_DIPLO_EVENT_STOP_DIGGING: buffer += "FROM_UI_DIPLO_EVENT_STOP_DIGGING"; break;
		default: buffer += szprintf("UNKNOWN_FROM_UI_DIPLO_EVENT_%u", eEvent);
		}
	}
	TOSTRING_DECL(DiploStatementTypes, eStatement) {
		switch (eStatement)
		{
		case NO_DIPLO_STATEMENT_TYPE: buffer += "NO_DIPLO_STATEMENT_TYPE"; break;
		case DIPLO_STATEMENT_REQUEST_PEACE: buffer += "DIPLO_STATEMENT_REQUEST_PEACE"; break;
		case DIPLO_STATEMENT_AGGRESSIVE_MILITARY_WARNING: buffer += "DIPLO_STATEMENT_AGGRESSIVE_MILITARY_WARNING"; break;
		case DIPLO_STATEMENT_KILLED_PROTECTED_CITY_STATE: buffer += "DIPLO_STATEMENT_KILLED_PROTECTED_CITY_STATE"; break;
		case DIPLO_STATEMENT_ATTACKED_PROTECTED_CITY_STATE: buffer += "DIPLO_STATEMENT_ATTACKED_PROTECTED_CITY_STATE"; break;
		case DIPLO_STATEMENT_BULLIED_PROTECTED_CITY_STATE: buffer += "DIPLO_STATEMENT_BULLIED_PROTECTED_CITY_STATE"; break;
		case DIPLO_STATEMENT_EXPANSION_SERIOUS_WARNING: buffer += "DIPLO_STATEMENT_EXPANSION_SERIOUS_WARNING"; break;
		case DIPLO_STATEMENT_EXPANSION_WARNING: buffer += "DIPLO_STATEMENT_EXPANSION_WARNING"; break;
		case DIPLO_STATEMENT_EXPANSION_BROKEN_PROMISE: buffer += "DIPLO_STATEMENT_EXPANSION_BROKEN_PROMISE"; break;
		case DIPLO_STATEMENT_PLOT_BUYING_SERIOUS_WARNING: buffer += "DIPLO_STATEMENT_PLOT_BUYING_SERIOUS_WARNING"; break;
		case DIPLO_STATEMENT_PLOT_BUYING_WARNING: buffer += "DIPLO_STATEMENT_PLOT_BUYING_WARNING"; break;
		case DIPLO_STATEMENT_PLOT_BUYING_BROKEN_PROMISE: buffer += "DIPLO_STATEMENT_PLOT_BUYING_BROKEN_PROMISE"; break;
		case DIPLO_STATEMENT_WE_ATTACKED_YOUR_MINOR: buffer += "DIPLO_STATEMENT_WE_ATTACKED_YOUR_MINOR"; break;
		case DIPLO_STATEMENT_WE_BULLIED_YOUR_MINOR: buffer += "DIPLO_STATEMENT_WE_BULLIED_YOUR_MINOR"; break;
		case DIPLO_STATEMENT_WORK_WITH_US: buffer += "DIPLO_STATEMENT_WORK_WITH_US"; break;
		case DIPLO_STATEMENT_WORK_WITH_US_RANDFAILED: buffer += "DIPLO_STATEMENT_WORK_WITH_US_RANDFAILED"; break;
		case DIPLO_STATEMENT_END_WORK_WITH_US: buffer += "DIPLO_STATEMENT_END_WORK_WITH_US"; break;
		case DIPLO_STATEMENT_DENOUNCE: buffer += "DIPLO_STATEMENT_DENOUNCE"; break;
		case DIPLO_STATEMENT_DENOUNCE_RANDFAILED: buffer += "DIPLO_STATEMENT_DENOUNCE_RANDFAILED"; break;
		case DIPLO_STATEMENT_END_WORK_AGAINST_SOMEONE: buffer += "DIPLO_STATEMENT_END_WORK_AGAINST_SOMEONE"; break;
		case DIPLO_STATEMENT_COOP_WAR_REQUEST: buffer += "DIPLO_STATEMENT_COOP_WAR_REQUEST"; break;
		case DIPLO_STATEMENT_COOP_WAR_TIME: buffer += "DIPLO_STATEMENT_COOP_WAR_TIME"; break;
		case DIPLO_STATEMENT_NOW_UNFORGIVABLE: buffer += "DIPLO_STATEMENT_NOW_UNFORGIVABLE"; break;
		case DIPLO_STATEMENT_NOW_ENEMY: buffer += "DIPLO_STATEMENT_NOW_ENEMY"; break;
		case DIPLO_STATEMENT_CAUGHT_YOUR_SPY: buffer += "DIPLO_STATEMENT_CAUGHT_YOUR_SPY"; break;
		case DIPLO_STATEMENT_KILLED_YOUR_SPY: buffer += "DIPLO_STATEMENT_KILLED_YOUR_SPY"; break;
		case DIPLO_STATEMENT_KILLED_MY_SPY: buffer += "DIPLO_STATEMENT_KILLED_MY_SPY"; break;
		case DIPLO_STATEMENT_SHARE_INTRIGUE: buffer += "DIPLO_STATEMENT_SHARE_INTRIGUE"; break;
		case DIPLO_STATEMENT_STOP_CONVERSIONS: buffer += "DIPLO_STATEMENT_STOP_CONVERSIONS"; break;
		case DIPLO_STATEMENT_DEMAND: buffer += "DIPLO_STATEMENT_DEMAND"; break;
		case DIPLO_STATEMENT_REQUEST: buffer += "DIPLO_STATEMENT_REQUEST"; break;
		case DIPLO_STATEMENT_REQUEST_RANDFAILED: buffer += "DIPLO_STATEMENT_REQUEST_RANDFAILED"; break;
		case DIPLO_STATEMENT_GIFT: buffer += "DIPLO_STATEMENT_GIFT"; break;
		case DIPLO_STATEMENT_GIFT_RANDFAILED: buffer += "DIPLO_STATEMENT_GIFT_RANDFAILED"; break;
		case DIPLO_STATEMENT_LUXURY_TRADE: buffer += "DIPLO_STATEMENT_LUXURY_TRADE"; break;
		case DIPLO_STATEMENT_EMBASSY_EXCHANGE: buffer += "DIPLO_STATEMENT_EMBASSY_EXCHANGE"; break;
		case DIPLO_STATEMENT_EMBASSY_OFFER: buffer += "DIPLO_STATEMENT_EMBASSY_OFFER"; break;
		case DIPLO_STATEMENT_OPEN_BORDERS_EXCHANGE: buffer += "DIPLO_STATEMENT_OPEN_BORDERS_EXCHANGE"; break;
		case DIPLO_STATEMENT_OPEN_BORDERS_OFFER: buffer += "DIPLO_STATEMENT_OPEN_BORDERS_OFFER"; break;
		case DIPLO_STATEMENT_PLAN_RESEARCH_AGREEMENT: buffer += "DIPLO_STATEMENT_PLAN_RESEARCH_AGREEMENT"; break;
		case DIPLO_STATEMENT_RESEARCH_AGREEMENT_OFFER: buffer += "DIPLO_STATEMENT_RESEARCH_AGREEMENT_OFFER"; break;
		case DIPLO_STATEMENT_RENEW_DEAL: buffer += "DIPLO_STATEMENT_RENEW_DEAL"; break;
		case DIPLO_STATEMENT_INSULT: buffer += "DIPLO_STATEMENT_INSULT"; break;
		case DIPLO_STATEMENT_COMPLIMENT: buffer += "DIPLO_STATEMENT_COMPLIMENT"; break;
		case DIPLO_STATEMENT_BOOT_KISSING: buffer += "DIPLO_STATEMENT_BOOT_KISSING"; break;
		case DIPLO_STATEMENT_WARMONGER: buffer += "DIPLO_STATEMENT_WARMONGER"; break;
		case DIPLO_STATEMENT_MINOR_CIV_COMPETITION: buffer += "DIPLO_STATEMENT_MINOR_CIV_COMPETITION"; break;
		case DIPLO_STATEMENT_DENOUNCE_FRIEND: buffer += "DIPLO_STATEMENT_DENOUNCE_FRIEND"; break;
		case DIPLO_STATEMENT_REQUEST_FRIEND_DENOUNCE: buffer += "DIPLO_STATEMENT_REQUEST_FRIEND_DENOUNCE"; break;
		case DIPLO_STATEMENT_REQUEST_FRIEND_DENOUNCE_RANDFAILED: buffer += "DIPLO_STATEMENT_REQUEST_FRIEND_DENOUNCE_RANDFAILED"; break;
		case DIPLO_STATEMENT_REQUEST_FRIEND_WAR: buffer += "DIPLO_STATEMENT_REQUEST_FRIEND_WAR"; break;
		case DIPLO_STATEMENT_ANGRY_BEFRIEND_ENEMY: buffer += "DIPLO_STATEMENT_ANGRY_BEFRIEND_ENEMY"; break;
		case DIPLO_STATEMENT_ANGRY_BEFRIEND_ENEMY_RANDFAILED: buffer += "DIPLO_STATEMENT_ANGRY_BEFRIEND_ENEMY_RANDFAILED"; break;
		case DIPLO_STATEMENT_ANGRY_DENOUNCED_FRIEND: buffer += "DIPLO_STATEMENT_ANGRY_DENOUNCED_FRIEND"; break;
		case DIPLO_STATEMENT_ANGRY_DENOUNCED_FRIEND_RANDFAILED: buffer += "DIPLO_STATEMENT_ANGRY_DENOUNCED_FRIEND_RANDFAILED"; break;
		case DIPLO_STATEMENT_HAPPY_DENOUNCED_ENEMY: buffer += "DIPLO_STATEMENT_HAPPY_DENOUNCED_ENEMY"; break;
		case DIPLO_STATEMENT_HAPPY_DENOUNCED_ENEMY_RANDFAILED: buffer += "DIPLO_STATEMENT_HAPPY_DENOUNCED_ENEMY_RANDFAILED"; break;
		case DIPLO_STATEMENT_HAPPY_BEFRIENDED_FRIEND: buffer += "DIPLO_STATEMENT_HAPPY_BEFRIENDED_FRIEND"; break;
		case DIPLO_STATEMENT_HAPPY_BEFRIENDED_FRIEND_RANDFAILED: buffer += "DIPLO_STATEMENT_HAPPY_BEFRIENDED_FRIEND_RANDFAILED"; break;
		case DIPLO_STATEMENT_FYI_BEFRIEND_HUMAN_ENEMY: buffer += "DIPLO_STATEMENT_FYI_BEFRIEND_HUMAN_ENEMY"; break;
		case DIPLO_STATEMENT_FYI_BEFRIEND_HUMAN_ENEMY_RANDFAILED: buffer += "DIPLO_STATEMENT_FYI_BEFRIEND_HUMAN_ENEMY_RANDFAILED"; break;
		case DIPLO_STATEMENT_FYI_DENOUNCED_HUMAN_FRIEND: buffer += "DIPLO_STATEMENT_FYI_DENOUNCED_HUMAN_FRIEND"; break;
		case DIPLO_STATEMENT_FYI_DENOUNCED_HUMAN_FRIEND_RANDFAILED: buffer += "DIPLO_STATEMENT_FYI_DENOUNCED_HUMAN_FRIEND_RANDFAILED"; break;
		case DIPLO_STATEMENT_FYI_DENOUNCED_HUMAN_ENEMY: buffer += "DIPLO_STATEMENT_FYI_DENOUNCED_HUMAN_ENEMY"; break;
		case DIPLO_STATEMENT_FYI_DENOUNCED_HUMAN_ENEMY_RANDFAILED: buffer += "DIPLO_STATEMENT_FYI_DENOUNCED_HUMAN_ENEMY_RANDFAILED"; break;
		case DIPLO_STATEMENT_FYI_BEFRIEND_HUMAN_FRIEND: buffer += "DIPLO_STATEMENT_FYI_BEFRIEND_HUMAN_FRIEND"; break;
		case DIPLO_STATEMENT_FYI_BEFRIEND_HUMAN_FRIEND_RANDFAILED: buffer += "DIPLO_STATEMENT_FYI_BEFRIEND_HUMAN_FRIEND_RANDFAILED"; break;
		case DIPLO_STATEMENT_SAME_POLICIES_FREEDOM: buffer += "DIPLO_STATEMENT_SAME_POLICIES_FREEDOM"; break;
		case DIPLO_STATEMENT_SAME_POLICIES_ORDER: buffer += "DIPLO_STATEMENT_SAME_POLICIES_ORDER"; break;
		case DIPLO_STATEMENT_SAME_POLICIES_AUTOCRACY: buffer += "DIPLO_STATEMENT_SAME_POLICIES_AUTOCRACY"; break;
		case DIPLO_STATEMENT_STOP_DIGGING: buffer += "DIPLO_STATEMENT_STOP_DIGGING"; break;
		case DIPLO_STATEMENT_WE_LIKED_THEIR_PROPOSAL: buffer += "DIPLO_STATEMENT_WE_LIKED_THEIR_PROPOSAL"; break;
		case DIPLO_STATEMENT_WE_DISLIKED_THEIR_PROPOSAL: buffer += "DIPLO_STATEMENT_WE_DISLIKED_THEIR_PROPOSAL"; break;
		case DIPLO_STATEMENT_THEY_SUPPORTED_OUR_PROPOSAL: buffer += "DIPLO_STATEMENT_THEY_SUPPORTED_OUR_PROPOSAL"; break;
		case DIPLO_STATEMENT_THEY_FOILED_OUR_PROPOSAL: buffer += "DIPLO_STATEMENT_THEY_FOILED_OUR_PROPOSAL"; break;
		case DIPLO_STATEMENT_THEY_SUPPORTED_OUR_HOSTING: buffer += "DIPLO_STATEMENT_THEY_SUPPORTED_OUR_HOSTING"; break;
		case DIPLO_STATEMENT_YOUR_IDEOLOGY_CAUSING_CIVIL_UNREST_FREEDOM: buffer += "DIPLO_STATEMENT_YOUR_IDEOLOGY_CAUSING_CIVIL_UNREST_FREEDOM"; break;
		case DIPLO_STATEMENT_YOUR_IDEOLOGY_CAUSING_CIVIL_UNREST_ORDER: buffer += "DIPLO_STATEMENT_YOUR_IDEOLOGY_CAUSING_CIVIL_UNREST_ORDER"; break;
		case DIPLO_STATEMENT_YOUR_IDEOLOGY_CAUSING_CIVIL_UNREST_AUTOCRACY: buffer += "DIPLO_STATEMENT_YOUR_IDEOLOGY_CAUSING_CIVIL_UNREST_AUTOCRACY"; break;
		case DIPLO_STATEMENT_OUR_IDEOLOGY_CAUSING_CIVIL_UNREST_FREEDOM: buffer += "DIPLO_STATEMENT_OUR_IDEOLOGY_CAUSING_CIVIL_UNREST_FREEDOM"; break;
		case DIPLO_STATEMENT_OUR_IDEOLOGY_CAUSING_CIVIL_UNREST_ORDER: buffer += "DIPLO_STATEMENT_OUR_IDEOLOGY_CAUSING_CIVIL_UNREST_ORDER"; break;
		case DIPLO_STATEMENT_OUR_IDEOLOGY_CAUSING_CIVIL_UNREST_AUTOCRACY: buffer += "DIPLO_STATEMENT_OUR_IDEOLOGY_CAUSING_CIVIL_UNREST_AUTOCRACY"; break;
		case DIPLO_STATEMENT_SWITCH_OUR_IDEOLOGY_FREEDOM: buffer += "DIPLO_STATEMENT_SWITCH_OUR_IDEOLOGY_FREEDOM"; break;
		case DIPLO_STATEMENT_SWITCH_OUR_IDEOLOGY_ORDER: buffer += "DIPLO_STATEMENT_SWITCH_OUR_IDEOLOGY_ORDER"; break;
		case DIPLO_STATEMENT_SWITCH_OUR_IDEOLOGY_AUTOCRACY: buffer += "DIPLO_STATEMENT_SWITCH_OUR_IDEOLOGY_AUTOCRACY"; break;
		case DIPLO_STATEMENT_YOUR_CULTURE_INFLUENTIAL: buffer += "DIPLO_STATEMENT_YOUR_CULTURE_INFLUENTIAL"; break;
		case DIPLO_STATEMENT_OUR_CULTURE_INFLUENTIAL: buffer += "DIPLO_STATEMENT_OUR_CULTURE_INFLUENTIAL"; break;
		case NUM_DIPLO_LOG_STATEMENT_TYPES: buffer += "NUM_DIPLO_LOG_STATEMENT_TYPES"; break;
		default: buffer += szprintf("UNKNOWN_DIPLO_STATEMENT_%u", eStatement);
		}
	}
	TOSTRING_DECL(NotificationTypes, eType) {
		switch (eType)
		{
		case NO_NOTIFICATION_TYPE:							buffer += "NO_NOTIFICATION_TYPE"; break;
		case NOTIFICATION_GENERIC:							buffer += "NOTIFICATION_GENERIC"; break;
		case NOTIFICATION_TECH:								buffer += "NOTIFICATION_TECH"; break;
		case NOTIFICATION_FREE_TECH:						buffer += "NOTIFICATION_FREE_TECH"; break;
		case NOTIFICATION_POLICY:							buffer += "NOTIFICATION_POLICY"; break;
		case NOTIFICATION_PRODUCTION:						buffer += "NOTIFICATION_PRODUCTION"; break;
		case NOTIFICATION_MET_MINOR:						buffer += "NOTIFICATION_MET_MINOR"; break;
		case NOTIFICATION_MINOR:							buffer += "NOTIFICATION_MINOR"; break;
		case NOTIFICATION_MINOR_QUEST:						buffer += "NOTIFICATION_MINOR_QUEST"; break;
		case NOTIFICATION_ENEMY_IN_TERRITORY:				buffer += "NOTIFICATION_ENEMY_IN_TERRITORY"; break;
		case NOTIFICATION_CITY_RANGE_ATTACK:				buffer += "NOTIFICATION_CITY_RANGE_ATTACK"; break;
		case NOTIFICATION_BARBARIAN:						buffer += "NOTIFICATION_BARBARIAN"; break;
		case NOTIFICATION_GOODY:							buffer += "NOTIFICATION_GOODY"; break;
		case NOTIFICATION_BUY_TILE:							buffer += "NOTIFICATION_BUY_TILE"; break;
		case NOTIFICATION_CITY_GROWTH:						buffer += "NOTIFICATION_CITY_GROWTH"; break;
		case NOTIFICATION_CITY_TILE:						buffer += "NOTIFICATION_CITY_TILE"; break;
		case NOTIFICATION_DEMAND_RESOURCE:					buffer += "NOTIFICATION_DEMAND_RESOURCE"; break;
		case NOTIFICATION_UNIT_PROMOTION:					buffer += "NOTIFICATION_UNIT_PROMOTION"; break;
		case NOTIFICATION_WONDER_COMPLETED_ACTIVE_PLAYER:	buffer += "NOTIFICATION_WONDER_COMPLETED_ACTIVE_PLAYER"; break;
		case NOTIFICATION_WONDER_COMPLETED:					buffer += "NOTIFICATION_WONDER_COMPLETED"; break;
		case NOTIFICATION_WONDER_BEATEN:					buffer += "NOTIFICATION_WONDER_BEATEN"; break;
		case NOTIFICATION_GOLDEN_AGE_BEGUN_ACTIVE_PLAYER:	buffer += "NOTIFICATION_GOLDEN_AGE_BEGUN_ACTIVE_PLAYER"; break;
		case NOTIFICATION_GOLDEN_AGE_ENDED_ACTIVE_PLAYER:	buffer += "NOTIFICATION_GOLDEN_AGE_ENDED_ACTIVE_PLAYER"; break;
		case NOTIFICATION_GREAT_PERSON_ACTIVE_PLAYER:		buffer += "NOTIFICATION_GREAT_PERSON_ACTIVE_PLAYER"; break;
		case NOTIFICATION_STARVING:							buffer += "NOTIFICATION_STARVING"; break;
		case NOTIFICATION_WAR_ACTIVE_PLAYER:				buffer += "NOTIFICATION_WAR_ACTIVE_PLAYER"; break;
		case NOTIFICATION_WAR:								buffer += "NOTIFICATION_WAR"; break;
		case NOTIFICATION_PEACE_ACTIVE_PLAYER:				buffer += "NOTIFICATION_PEACE_ACTIVE_PLAYER"; break;
		case NOTIFICATION_PEACE:							buffer += "NOTIFICATION_PEACE"; break;
		case NOTIFICATION_VICTORY:							buffer += "NOTIFICATION_VICTORY"; break;
		case NOTIFICATION_UNIT_DIED:						buffer += "NOTIFICATION_UNIT_DIED"; break;
		case NOTIFICATION_CITY_LOST:						buffer += "NOTIFICATION_CITY_LOST"; break;
		case NOTIFICATION_CAPITAL_LOST_ACTIVE_PLAYER:		buffer += "NOTIFICATION_CAPITAL_LOST_ACTIVE_PLAYER"; break;
		case NOTIFICATION_CAPITAL_LOST:						buffer += "NOTIFICATION_CAPITAL_LOST"; break;
		case NOTIFICATION_CAPITAL_RECOVERED:				buffer += "NOTIFICATION_CAPITAL_RECOVERED"; break;
		case NOTIFICATION_PLAYER_KILLED:					buffer += "NOTIFICATION_PLAYER_KILLED"; break;
		case NOTIFICATION_DISCOVERED_LUXURY_RESOURCE:		buffer += "NOTIFICATION_DISCOVERED_LUXURY_RESOURCE"; break;
		case NOTIFICATION_DISCOVERED_STRATEGIC_RESOURCE:	buffer += "NOTIFICATION_DISCOVERED_STRATEGIC_RESOURCE"; break;
		case NOTIFICATION_DISCOVERED_BONUS_RESOURCE:		buffer += "NOTIFICATION_DISCOVERED_BONUS_RESOURCE"; break;
		case NOTIFICATION_DIPLO_VOTE:						buffer += "NOTIFICATION_DIPLO_VOTE"; break;
		case NOTIFICATION_RELIGION_RACE:					buffer += "NOTIFICATION_RELIGION_RACE"; break;
		case NOTIFICATION_EXPLORATION_RACE:					buffer += "NOTIFICATION_EXPLORATION_RACE"; break;
		case NOTIFICATION_DIPLOMACY_DECLARATION:			buffer += "NOTIFICATION_DIPLOMACY_DECLARATION"; break;
		case NOTIFICATION_DEAL_EXPIRED_GPT:					buffer += "NOTIFICATION_DEAL_EXPIRED_GPT"; break;
		case NOTIFICATION_DEAL_EXPIRED_RESOURCE:			buffer += "NOTIFICATION_DEAL_EXPIRED_RESOURCE"; break;
		case NOTIFICATION_DEAL_EXPIRED_OPEN_BORDERS:		buffer += "NOTIFICATION_DEAL_EXPIRED_OPEN_BORDERS"; break;
		case NOTIFICATION_DEAL_EXPIRED_DEFENSIVE_PACT:		buffer += "NOTIFICATION_DEAL_EXPIRED_DEFENSIVE_PACT"; break;
		case NOTIFICATION_DEAL_EXPIRED_RESEARCH_AGREEMENT:	buffer += "NOTIFICATION_DEAL_EXPIRED_RESEARCH_AGREEMENT"; break;
		case NOTIFICATION_DEAL_EXPIRED_TRADE_AGREEMENT:		buffer += "NOTIFICATION_DEAL_EXPIRED_TRADE_AGREEMENT"; break;
		case NOTIFICATION_TECH_AWARD:						buffer += "NOTIFICATION_TECH_AWARD"; break;
		case NOTIFICATION_PLAYER_DEAL:						buffer += "NOTIFICATION_PLAYER_DEAL"; break;
		case NOTIFICATION_PLAYER_DEAL_RECEIVED:				buffer += "NOTIFICATION_PLAYER_DEAL_RECEIVED"; break;
		case NOTIFICATION_PLAYER_DEAL_RESOLVED:				buffer += "NOTIFICATION_PLAYER_DEAL_RESOLVED"; break;
		case NOTIFICATION_PROJECT_COMPLETED:				buffer += "NOTIFICATION_PROJECT_COMPLETED"; break;
		case NOTIFICATION_REBELS:							buffer += "NOTIFICATION_REBELS"; break;
		case NOTIFICATION_FREE_POLICY:						buffer += "NOTIFICATION_FREE_POLICY"; break;
		case NOTIFICATION_FREE_GREAT_PERSON:				buffer += "NOTIFICATION_FREE_GREAT_PERSON"; break;
		case NOTIFICATION_DENUNCIATION_EXPIRED:				buffer += "NOTIFICATION_DENUNCIATION_EXPIRED"; break;
		case NOTIFICATION_FRIENDSHIP_EXPIRED:				buffer += "NOTIFICATION_FRIENDSHIP_EXPIRED"; break;
		case NOTIFICATION_RELIGION_FOUNDED_ACTIVE_PLAYER:	buffer += "NOTIFICATION_RELIGION_FOUNDED_ACTIVE_PLAYER"; break;
		case NOTIFICATION_RELIGION_FOUNDED:					buffer += "NOTIFICATION_RELIGION_FOUNDED"; break;
		case NOTIFICATION_PANTHEON_FOUNDED_ACTIVE_PLAYER:	buffer += "NOTIFICATION_PANTHEON_FOUNDED_ACTIVE_PLAYER"; break;
		case NOTIFICATION_PANTHEON_FOUNDED:					buffer += "NOTIFICATION_PANTHEON_FOUNDED"; break;
		case NOTIFICATION_FOUND_PANTHEON:					buffer += "NOTIFICATION_FOUND_PANTHEON"; break;
		case NOTIFICATION_FOUND_RELIGION:					buffer += "NOTIFICATION_FOUND_RELIGION"; break;
		case NOTIFICATION_ENHANCE_RELIGION:					buffer += "NOTIFICATION_ENHANCE_RELIGION"; break;
		case NOTIFICATION_RELIGION_ENHANCED_ACTIVE_PLAYER:	buffer += "NOTIFICATION_RELIGION_ENHANCED_ACTIVE_PLAYER"; break;
		case NOTIFICATION_RELIGION_ENHANCED:				buffer += "NOTIFICATION_RELIGION_ENHANCED"; break;
		case NOTIFICATION_SPY_CREATED_ACTIVE_PLAYER:		buffer += "NOTIFICATION_SPY_CREATED_ACTIVE_PLAYER"; break;
		case NOTIFICATION_SPY_STOLE_TECH:					buffer += "NOTIFICATION_SPY_STOLE_TECH"; break;
		case NOTIFICATION_SPY_CANT_STEAL_TECH:				buffer += "NOTIFICATION_SPY_CANT_STEAL_TECH"; break;
		case NOTIFICATION_CAN_BUILD_MISSIONARY:				buffer += "NOTIFICATION_CAN_BUILD_MISSIONARY"; break;
		case NOTIFICATION_OTHER_PLAYER_NEW_ERA:				buffer += "NOTIFICATION_OTHER_PLAYER_NEW_ERA"; break;
		case NOTIFICATION_SPY_EVICTED:						buffer += "NOTIFICATION_SPY_EVICTED"; break;
		case NOTIFICATION_RELIGION_SPREAD:					buffer += "NOTIFICATION_RELIGION_SPREAD"; break;
		case NOTIFICATION_TECH_STOLEN_SPY_DETECTED:			buffer += "NOTIFICATION_TECH_STOLEN_SPY_DETECTED"; break;
		case NOTIFICATION_TECH_STOLEN_SPY_IDENTIFIED:		buffer += "NOTIFICATION_TECH_STOLEN_SPY_IDENTIFIED"; break;
		case NOTIFICATION_SPY_WAS_KILLED:					buffer += "NOTIFICATION_SPY_WAS_KILLED"; break;
		case NOTIFICATION_SPY_KILLED_A_SPY:					buffer += "NOTIFICATION_SPY_KILLED_A_SPY"; break;
		case NOTIFICATION_SPY_REPLACEMENT:					buffer += "NOTIFICATION_SPY_REPLACEMENT"; break;
		case NOTIFICATION_MAYA_LONG_COUNT:					buffer += "NOTIFICATION_MAYA_LONG_COUNT"; break;
		case NOTIFICATION_FAITH_GREAT_PERSON:				buffer += "NOTIFICATION_FAITH_GREAT_PERSON"; break;
		case NOTIFICATION_SPY_PROMOTION:					buffer += "NOTIFICATION_SPY_PROMOTION"; break;
		case NOTIFICATION_INTRIGUE_DECEPTION:				buffer += "NOTIFICATION_INTRIGUE_DECEPTION"; break;
		case NOTIFICATION_SPY_RIG_ELECTION_SUCCESS:			buffer += "NOTIFICATION_SPY_RIG_ELECTION_SUCCESS"; break;

		case NOTIFICATION_SPY_RIG_ELECTION_FAILURE:			buffer += "NOTIFICATION_SPY_RIG_ELECTION_FAILURE"; break;
		case NOTIFICATION_SPY_RIG_ELECTION_ALERT:			buffer += "NOTIFICATION_SPY_RIG_ELECTION_ALERT"; break;
		case NOTIFICATION_SPY_YOU_STAGE_COUP_SUCCESS:		buffer += "NOTIFICATION_SPY_YOU_STAGE_COUP_SUCCESS"; break;
		case NOTIFICATION_SPY_YOU_STAGE_COUP_FAILURE:		buffer += "NOTIFICATION_SPY_YOU_STAGE_COUP_FAILURE"; break;
		case NOTIFICATION_SPY_STAGE_COUP_SUCCESS:			buffer += "NOTIFICATION_SPY_STAGE_COUP_SUCCESS"; break;
		case NOTIFICATION_SPY_STAGE_COUP_FAILURE:			buffer += "NOTIFICATION_SPY_STAGE_COUP_FAILURE"; break;

		case NOTIFICATION_INTRIGUE_BUILDING_SNEAK_ATTACK_ARMY:						buffer += "NOTIFICATION_INTRIGUE_BUILDING_SNEAK_ATTACK_ARMY"; break;
		case NOTIFICATION_INTRIGUE_BUILDING_SNEAK_ATTACK_AMPHIBIOUS:				buffer += "NOTIFICATION_INTRIGUE_BUILDING_SNEAK_ATTACK_AMPHIBIOUS"; break;
		case NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_KNOWN_CITY_UNKNOWN:	buffer += "NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_KNOWN_CITY_UNKNOWN"; break;
		case NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_KNOWN_CITY_KNOWN:		buffer += "NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_KNOWN_CITY_KNOWN"; break;
		case NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_YOU_CITY_UNKNOWN:		buffer += "NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_YOU_CITY_UNKNOWN"; break;
		case NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_YOU_CITY_KNOWN:		buffer += "NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_YOU_CITY_KNOWN"; break;
		case NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_UNKNOWN:				buffer += "NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_UNKNOWN"; break;
		case NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_KNOWN_CITY_UNKNOWN:	buffer += "NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_KNOWN_CITY_UNKNOWN"; break;
		case NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_KNOWN_CITY_KNOWN:	buffer += "NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_KNOWN_CITY_KNOWN"; break;
		case NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_YOU_CITY_UNKNOWN:	buffer += "NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_YOU_CITY_UNKNOWN"; break;
		case NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_YOU_CITY_KNOWN:		buffer += "NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_YOU_CITY_KNOWN"; break;
		case NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_UNKNOWN:				buffer += "NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_UNKNOWN"; break;

		case NOTIFICATION_RELIGION_ERROR:						buffer += "NOTIFICATION_RELIGION_ERROR"; break;
		case NOTIFICATION_AUTOMATIC_FAITH_PURCHASE_STOPPED:		buffer += "NOTIFICATION_AUTOMATIC_FAITH_PURCHASE_STOPPED"; break;

		case NOTIFICATION_EXPANSION_PROMISE_EXPIRED:			buffer += "NOTIFICATION_EXPANSION_PROMISE_EXPIRED"; break;
		case NOTIFICATION_BORDER_PROMISE_EXPIRED:				buffer += "NOTIFICATION_BORDER_PROMISE_EXPIRED"; break;

		case NOTIFICATION_TRADE_ROUTE:							buffer += "NOTIFICATION_TRADE_ROUTE"; break;
		case NOTIFICATION_TRADE_ROUTE_BROKEN:					buffer += "NOTIFICATION_TRADE_ROUTE_BROKEN"; break;

		case NOTIFICATION_RELIGION_SPREAD_NATURAL:				buffer += "NOTIFICATION_RELIGION_SPREAD_NATURAL"; break;

		case NOTIFICATION_INTRIGUE_CONSTRUCTING_WONDER:			buffer += "NOTIFICATION_INTRIGUE_CONSTRUCTING_WONDER"; break;

		case NOTIFICATION_MINOR_BUYOUT:							buffer += "NOTIFICATION_MINOR_BUYOUT"; break;

		case NOTIFICATION_REQUEST_RESOURCE:						buffer += "NOTIFICATION_REQUEST_RESOURCE"; break;

		case NOTIFICATION_LIBERATED_MAJOR_CITY:					buffer += "NOTIFICATION_LIBERATED_MAJOR_CITY"; break;
		case NOTIFICATION_RESURRECTED_MAJOR_CIV:				buffer += "NOTIFICATION_RESURRECTED_MAJOR_CIV"; break;

			// XP2
		case NOTIFICATION_ADD_REFORMATION_BELIEF:				buffer += "NOTIFICATION_ADD_REFORMATION_BELIEF"; break;
		case NOTIFICATION_LEAGUE_CALL_FOR_PROPOSALS:			buffer += "NOTIFICATION_LEAGUE_CALL_FOR_PROPOSALS"; break;
		case NOTIFICATION_CHOOSE_ARCHAEOLOGY:					buffer += "NOTIFICATION_CHOOSE_ARCHAEOLOGY"; break;
		case NOTIFICATION_LEAGUE_CALL_FOR_VOTES:				buffer += "NOTIFICATION_LEAGUE_CALL_FOR_VOTES"; break;
		case NOTIFICATION_CHOOSE_IDEOLOGY:						buffer += "NOTIFICATION_CHOOSE_IDEOLOGY"; break;
		case NOTIFICATION_IDEOLOGY_CHOSEN:						buffer += "NOTIFICATION_IDEOLOGY_CHOSEN"; break;
		case NOTIFICATION_DIPLOMAT_EJECTED:						buffer += "NOTIFICATION_DIPLOMAT_EJECTED"; break;

			// Trade notifications
		case NOTIFICATION_INTERNATIONAL_TRADE_UNIT_PLUNDERED_TRADER:	buffer += "NOTIFICATION_INTERNATIONAL_TRADE_UNIT_PLUNDERED_TRADER"; break;
		case NOTIFICATION_INTERNATIONAL_TRADE_UNIT_PLUNDERED_TRADEE:	buffer += "NOTIFICATION_INTERNATIONAL_TRADE_UNIT_PLUNDERED_TRADEE"; break;

		case NOTIFICATION_REFORMATION_BELIEF_ADDED_ACTIVE_PLAYER:		buffer += "NOTIFICATION_REFORMATION_BELIEF_ADDED_ACTIVE_PLAYER"; break;
		case NOTIFICATION_REFORMATION_BELIEF_ADDED:						buffer += "NOTIFICATION_REFORMATION_BELIEF_ADDED"; break;

		case NOTIFICATION_GREAT_WORK_COMPLETED_ACTIVE_PLAYER:			buffer += "NOTIFICATION_GREAT_WORK_COMPLETED_ACTIVE_PLAYER"; break;

		case NOTIFICATION_LEAGUE_VOTING_DONE:		buffer += "NOTIFICATION_LEAGUE_VOTING_DONE"; break;
		case NOTIFICATION_LEAGUE_VOTING_SOON:		buffer += "NOTIFICATION_LEAGUE_VOTING_SOON"; break;

		case NOTIFICATION_CULTURE_VICTORY_SOMEONE_INFLUENTIAL:			buffer += "NOTIFICATION_CULTURE_VICTORY_SOMEONE_INFLUENTIAL"; break;
		case NOTIFICATION_CULTURE_VICTORY_WITHIN_TWO:					buffer += "NOTIFICATION_CULTURE_VICTORY_WITHIN_TWO"; break;
		case NOTIFICATION_CULTURE_VICTORY_WITHIN_TWO_ACTIVE_PLAYER:		buffer += "NOTIFICATION_CULTURE_VICTORY_WITHIN_TWO_ACTIVE_PLAYER"; break;
		case NOTIFICATION_CULTURE_VICTORY_WITHIN_ONE:					buffer += "NOTIFICATION_CULTURE_VICTORY_WITHIN_ONE"; break;
		case NOTIFICATION_CULTURE_VICTORY_WITHIN_ONE_ACTIVE_PLAYER:		buffer += "NOTIFICATION_CULTURE_VICTORY_WITHIN_ONE_ACTIVE_PLAYER"; break;
		case NOTIFICATION_CULTURE_VICTORY_NO_LONGER_INFLUENTIAL:		buffer += "NOTIFICATION_CULTURE_VICTORY_NO_LONGER_INFLUENTIAL"; break;

		case NOTIFICATION_PLAYER_RECONNECTED:		buffer += "NOTIFICATION_PLAYER_RECONNECTED"; break;
		case NOTIFICATION_PLAYER_DISCONNECTED:		buffer += "NOTIFICATION_PLAYER_DISCONNECTED"; break;
		case NOTIFICATION_TURN_MODE_SEQUENTIAL:		buffer += "NOTIFICATION_TURN_MODE_SEQUENTIAL"; break;
		case NOTIFICATION_TURN_MODE_SIMULTANEOUS:	buffer += "NOTIFICATION_TURN_MODE_SIMULTANEOUS"; break;
		case NOTIFICATION_HOST_MIGRATION:			buffer += "NOTIFICATION_HOST_MIGRATION"; break;
		case NOTIFICATION_PLAYER_CONNECTING:		buffer += "NOTIFICATION_PLAYER_CONNECTING"; break;

		case NOTIFICATION_CITY_REVOLT_POSSIBLE:		buffer += "NOTIFICATION_CITY_REVOLT_POSSIBLE"; break;
		case NOTIFICATION_CITY_REVOLT:				buffer += "NOTIFICATION_CITY_REVOLT"; break;
		default:
			buffer += szprintf("UNKNOWN_NOTIFICATION_TYPE_%u", eType);
		}
	}
	TOSTRING_DECL(GameMessageTypes, eType)
	{
		switch (eType)
		{
		case GAMEMESSAGE_NETWORK_READY:			buffer += "GAMEMESSAGE_NETWORK_READY"; break;
		case GAMEMESSAGE_VERIFY_VERSION:		buffer += "GAMEMESSAGE_VERIFY_VERSION"; break;
		case GAMEMESSAGE_VERSION_NACK:			buffer += "GAMEMESSAGE_VERSION_NACK"; break;
		case GAMEMESSAGE_VERSION_WARNING:		buffer += "GAMEMESSAGE_VERSION_WARNING"; break;
		case GAMEMESSAGE_GAME_TYPE:				buffer += "GAMEMESSAGE_GAME_TYPE"; break;
		case GAMEMESSAGE_ID_ASSIGNMENT:			buffer += "GAMEMESSAGE_ID_ASSIGNMENT"; break;
		case GAMEMESSAGE_FILE_INFO:				buffer += "GAMEMESSAGE_FILE_INFO"; break;
		case GAMEMESSAGE_PICK_YOUR_CIV:			buffer += "GAMEMESSAGE_PICK_YOUR_CIV"; break;
		case GAMEMESSAGE_CIV_CHOICE:			buffer += "GAMEMESSAGE_CIV_CHOICE"; break;
		case GAMEMESSAGE_CONFIRM_CIV_CLAIM:		buffer += "GAMEMESSAGE_CONFIRM_CIV_CLAIM"; break;
		case GAMEMESSAGE_CLAIM_INFO:			buffer += "GAMEMESSAGE_CLAIM_INFO"; break;
		case GAMEMESSAGE_CIV_CHOICE_ACK:		buffer += "GAMEMESSAGE_CIV_CHOICE_ACK"; break;
		case GAMEMESSAGE_CIV_CHOICE_NACK:		buffer += "GAMEMESSAGE_CIV_CHOICE_NACK"; break;
		case GAMEMESSAGE_CIV_CHOSEN:			buffer += "GAMEMESSAGE_CIV_CHOSEN"; break;
		case GAMEMESSAGE_INTERIM_NOTICE:		buffer += "GAMEMESSAGE_INTERIM_NOTICE"; break;
		case GAMEMESSAGE_INIT_INFO:				buffer += "GAMEMESSAGE_INIT_INFO"; break;
		case GAMEMESSAGE_MAPSCRIPT_CHECK:		buffer += "GAMEMESSAGE_MAPSCRIPT_CHECK"; break;
		case GAMEMESSAGE_MAPSCRIPT_ACK:			buffer += "GAMEMESSAGE_MAPSCRIPT_ACK"; break;
		case GAMEMESSAGE_LOAD_GAME:				buffer += "GAMEMESSAGE_LOAD_GAME"; break;
		case GAMEMESSAGE_PLAYER_ID:				buffer += "GAMEMESSAGE_PLAYER_ID"; break;
		case GAMEMESSAGE_SLOT_REASSIGNMENT:		buffer += "GAMEMESSAGE_SLOT_REASSIGNMENT"; break;
		case GAMEMESSAGE_PLAYER_INFO:			buffer += "GAMEMESSAGE_PLAYER_INFO"; break;
		case GAMEMESSAGE_GAME_INFO:				buffer += "GAMEMESSAGE_GAME_INFO"; break;
		case GAMEMESSAGE_REASSIGN_PLAYER:		buffer += "GAMEMESSAGE_REASSIGN_PLAYER"; break;
		case GAMEMESSAGE_PITBOSS_INFO:			buffer += "GAMEMESSAGE_PITBOSS_INFO"; break;
		case GAMEMESSAGE_LAUNCHING_INFO:		buffer += "GAMEMESSAGE_LAUNCHING_INFO"; break;
		case GAMEMESSAGE_INIT_GAME:				buffer += "GAMEMESSAGE_INIT_GAME"; break;
		case GAMEMESSAGE_INIT_PLAYERS:			buffer += "GAMEMESSAGE_INIT_PLAYERS"; break;
		case GAMEMESSAGE_AUTH_REQUEST:			buffer += "GAMEMESSAGE_AUTH_REQUEST"; break;
		case GAMEMESSAGE_AUTH_RESPONSE:			buffer += "GAMEMESSAGE_AUTH_RESPONSE"; break;
		case GAMEMESSAGE_SYNCH_START:			buffer += "GAMEMESSAGE_SYNCH_START"; break;
		case GAMEMESSAGE_PLAYER_OPTION:			buffer += "GAMEMESSAGE_PLAYER_OPTION"; break;
		case GAMEMESSAGE_EXTENDED_GAME:			buffer += "GAMEMESSAGE_EXTENDED_GAME"; break;
		case GAMEMESSAGE_AUTO_MOVES:			buffer += "GAMEMESSAGE_AUTO_MOVES"; break;
		case GAMEMESSAGE_TURN_COMPLETE:			buffer += "GAMEMESSAGE_TURN_COMPLETE"; break;
		case GAMEMESSAGE_PUSH_MISSION:			buffer += "GAMEMESSAGE_PUSH_MISSION"; break;
		case GAMEMESSAGE_AUTO_MISSION:			buffer += "GAMEMESSAGE_AUTO_MISSION"; break;
		case GAMEMESSAGE_DO_COMMAND:			buffer += "GAMEMESSAGE_DO_COMMAND"; break;
		case GAMEMESSAGE_PUSH_ORDER:			buffer += "GAMEMESSAGE_PUSH_ORDER"; break;
		case GAMEMESSAGE_POP_ORDER:				buffer += "GAMEMESSAGE_POP_ORDER"; break;
		case GAMEMESSAGE_PURCHASE:				buffer += "GAMEMESSAGE_PURCHASE"; break;
		case GAMEMESSAGE_DO_TASK:				buffer += "GAMEMESSAGE_DO_TASK"; break;
		case GAMEMESSAGE_RESEARCH:				buffer += "GAMEMESSAGE_RESEARCH"; break;
		case GAMEMESSAGE_CONVERT:				buffer += "GAMEMESSAGE_CONVERT"; break;
		case GAMEMESSAGE_CHAT:					buffer += "GAMEMESSAGE_CHAT"; break;
		case GAMEMESSAGE_PING:					buffer += "GAMEMESSAGE_PING"; break;
		case GAMEMESSAGE_SIGN:					buffer += "GAMEMESSAGE_SIGN"; break;
		case GAMEMESSAGE_LINE_ENTITY:			buffer += "GAMEMESSAGE_LINE_ENTITY"; break;
		case GAMEMESSAGE_SIGN_DELETE:			buffer += "GAMEMESSAGE_SIGN_DELETE"; break;
		case GAMEMESSAGE_LINE_ENTITY_DELETE:	buffer += "GAMEMESSAGE_LINE_ENTITY_DELETE"; break;
		case GAMEMESSAGE_LINE_GROUP_DELETE:		buffer += "GAMEMESSAGE_LINE_GROUP_DELETE"; break;
		case GAMEMESSAGE_PAUSE:					buffer += "GAMEMESSAGE_PAUSE"; break;
		case GAMEMESSAGE_MP_KICK:				buffer += "GAMEMESSAGE_MP_KICK"; break;
		case GAMEMESSAGE_MP_RETIRE:				buffer += "GAMEMESSAGE_MP_RETIRE"; break;
		case GAMEMESSAGE_CLOSE_CONNECTION:		buffer += "GAMEMESSAGE_CLOSE_CONNECTION"; break;
		case GAMEMESSAGE_NEVER_JOINED:			buffer += "GAMEMESSAGE_NEVER_JOINED"; break;
		case GAMEMESSAGE_MP_DROP_INIT:			buffer += "GAMEMESSAGE_MP_DROP_INIT"; break;
		case GAMEMESSAGE_MP_DROP_VOTE:			buffer += "GAMEMESSAGE_MP_DROP_VOTE"; break;
		case GAMEMESSAGE_MP_DROP_UPDATE:		buffer += "GAMEMESSAGE_MP_DROP_UPDATE"; break;
		case GAMEMESSAGE_MP_DROP_RESULT:		buffer += "GAMEMESSAGE_MP_DROP_RESULT"; break;
		case GAMEMESSAGE_MP_DROP_SAVE:			buffer += "GAMEMESSAGE_MP_DROP_SAVE"; break;
		case GAMEMESSAGE_TOGGLE_TRADE:			buffer += "GAMEMESSAGE_TOGGLE_TRADE"; break;
		case GAMEMESSAGE_IMPLEMENT_OFFER:		buffer += "GAMEMESSAGE_IMPLEMENT_OFFER"; break;
		case GAMEMESSAGE_CHANGE_WAR:			buffer += "GAMEMESSAGE_CHANGE_WAR"; break;
		case GAMEMESSAGE_IGNORE_WARNING:			buffer += "GAMEMESSAGE_IGNORE_WARNING"; break;
		case GAMEMESSAGE_PLEDGE_MINOR_PROTECTION:	buffer += "GAMEMESSAGE_PLEDGE_MINOR_PROTECTION"; break;
		case GAMEMESSAGE_MINOR_NO_UNIT_SPAWNING:	buffer += "GAMEMESSAGE_MINOR_NO_UNIT_SPAWNING"; break;
		case GAMEMESSAGE_LIBERATE_PLAYER:			buffer += "GAMEMESSAGE_LIBERATE_PLAYER"; break;
		case GAMEMESSAGE_CHOOSE_ELECTION:			buffer += "GAMEMESSAGE_CHOOSE_ELECTION"; break;
		case GAMEMESSAGE_DIPLO_VOTE:				buffer += "GAMEMESSAGE_DIPLO_VOTE"; break;
		case GAMEMESSAGE_APPLY_EVENT:				buffer += "GAMEMESSAGE_APPLY_EVENT"; break;
		case GAMEMESSAGE_CONTACT_CIV:				buffer += "GAMEMESSAGE_CONTACT_CIV"; break;
		case GAMEMESSAGE_DIPLO_CHAT:				buffer += "GAMEMESSAGE_DIPLO_CHAT"; break;
		case GAMEMESSAGE_SEND_OFFER:				buffer += "GAMEMESSAGE_SEND_OFFER"; break;
		case GAMEMESSAGE_RENEGOTIATE:				buffer += "GAMEMESSAGE_RENEGOTIATE"; break;
		case GAMEMESSAGE_RENEGOTIATE_ITEM:			buffer += "GAMEMESSAGE_RENEGOTIATE_ITEM"; break;
		case GAMEMESSAGE_EXIT_TRADE:				buffer += "GAMEMESSAGE_EXIT_TRADE"; break;
		case GAMEMESSAGE_KILL_DEAL:					buffer += "GAMEMESSAGE_KILL_DEAL"; break;
		case GAMEMESSAGE_UPDATE_POLICIES:			buffer += "GAMEMESSAGE_UPDATE_POLICIES"; break;
		case GAMEMESSAGE_CLEAR_TABLE:				buffer += "GAMEMESSAGE_CLEAR_TABLE"; break;
		case GAMEMESSAGE_POPUP_PROCESSED:			buffer += "GAMEMESSAGE_POPUP_PROCESSED"; break;
		case GAMEMESSAGE_DIPLOMACY_FROM_UI:			buffer += "GAMEMESSAGE_DIPLOMACY_FROM_UI"; break;
		case GAMEMESSAGE_HOT_DROP_NOTICE:			buffer += "GAMEMESSAGE_HOT_DROP_NOTICE"; break;
		case GAMEMESSAGE_POPUP:						buffer += "GAMEMESSAGE_POPUP"; break;
		case GAMEMESSAGE_EVENT_TRIGGERED:			buffer += "GAMEMESSAGE_EVENT_TRIGGERED"; break;
		case GAMEMESSAGE_LAUNCH_SPACESHIP:			buffer += "GAMEMESSAGE_LAUNCH_SPACESHIP"; break;
		case GAMEMESSAGE_ADVANCED_START_ACTION:			buffer += "GAMEMESSAGE_ADVANCED_START_ACTION"; break;
		case GAMEMESSAGE_MINOR_CIV_QUEST_NO_INTEREST:	buffer += "GAMEMESSAGE_MINOR_CIV_QUEST_NO_INTEREST"; break;
		case GAMEMESSAGE_MINOR_CIV_QUEST_COMPLETED:		buffer += "GAMEMESSAGE_MINOR_CIV_QUEST_COMPLETED"; break;
		case GAMEMESSAGE_MINOR_CIV_INTRUSION:			buffer += "GAMEMESSAGE_MINOR_CIV_INTRUSION"; break;
		case GAMEMESSAGE_MINOR_CIV_ENTER_TERRITORY:		buffer += "GAMEMESSAGE_MINOR_CIV_ENTER_TERRITORY"; break;
		case GAMEMESSAGE_BARBARIAN_RANSOM:				buffer += "GAMEMESSAGE_BARBARIAN_RANSOM"; break;
		case GAMEMESSAGE_GIFT_UNIT:						buffer += "GAMEMESSAGE_GIFT_UNIT"; break;
		case GAMEMESSAGE_RETURN_CIVILIAN:				buffer += "GAMEMESSAGE_RETURN_CIVILIAN"; break;
		case GAMEMESSAGE_UPDATE_CITY_CITIZENS:			buffer += "GAMEMESSAGE_UPDATE_CITY_CITIZENS"; break;
		case GAMEMESSAGE_SELL_BUILDING:					buffer += "GAMEMESSAGE_SELL_BUILDING"; break;
		case GAMEMESSAGE_PLAYER_HURRY:					buffer += "GAMEMESSAGE_PLAYER_HURRY"; break;
		case GAMEMESSAGE_MOD_NET_MESSAGE:				buffer += "GAMEMESSAGE_MOD_NET_MESSAGE"; break;
		case GAMEMESSAGE_SWAP_UNITS:					buffer += "GAMEMESSAGE_SWAP_UNITS"; break;
		case GAMEMESSAGE_CITY_BUY_PLOT:					buffer += "GAMEMESSAGE_CITY_BUY_PLOT"; break;
		case GAMEMESSAGE_MINOR_CIV_GIFT_GOLD:				buffer += "GAMEMESSAGE_MINOR_CIV_GIFT_GOLD"; break;
		case GAMEMESSAGE_MINOR_CIV_GIFT_TILE_IMPROVEMENT:	buffer += "GAMEMESSAGE_MINOR_CIV_GIFT_TILE_IMPROVEMENT"; break;
		case GAMEMESSAGE_MINOR_CIV_BULLY_GOLD:				buffer += "GAMEMESSAGE_MINOR_CIV_BULLY_GOLD"; break;
		case GAMEMESSAGE_MINOR_CIV_BULLY_UNIT:				buffer += "GAMEMESSAGE_MINOR_CIV_BULLY_UNIT"; break;
		case GAMEMESSAGE_MINOR_CIV_BUYOUT:					buffer += "GAMEMESSAGE_MINOR_CIV_BUYOUT"; break;
		case GAMEMESSAGE_GREAT_PERSON_CHOICE:				buffer += "GAMEMESSAGE_GREAT_PERSON_CHOICE"; break;
		case GAMEMESSAGE_SET_CITY_AI_FOCUS:					buffer += "GAMEMESSAGE_SET_CITY_AI_FOCUS"; break;
		case GAMEMESSAGE_CITY_SYNC_CHECK:					buffer += "GAMEMESSAGE_CITY_SYNC_CHECK"; break;
		case GAMEMESSAGE_UNIT_SYNC_CHECK:					buffer += "GAMEMESSAGE_UNIT_SYNC_CHECK"; break;
		case GAMEMESSAGE_PLOT_SYNC_CHECK:					buffer += "GAMEMESSAGE_PLOT_SYNC_CHECK"; break;
		case GAMEMESSAGE_PLAYER_SYNC_CHECK:						buffer += "GAMEMESSAGE_PLAYER_SYNC_CHECK"; break;
		case GAMEMESSAGE_RANDOM_NUMBER_GENERATOR_SYNC_CHECK:	buffer += "GAMEMESSAGE_RANDOM_NUMBER_GENERATOR_SYNC_CHECK"; break;
		case GAMEMESSAGE_LOOP_BARRIER:							buffer += "GAMEMESSAGE_LOOP_BARRIER"; break;
		case GAMEMESSAGE_LOOP_BARRIER_COMPLETE:					buffer += "GAMEMESSAGE_LOOP_BARRIER_COMPLETE"; break;
		case GAMEMESSAGE_PLAYER_READY:							buffer += "GAMEMESSAGE_PLAYER_READY"; break;
		case GAMEMESSAGE_TURN_SLICE:							buffer += "GAMEMESSAGE_TURN_SLICE"; break;
		case GAMEMESSAGE_TURN_SLICE_ADJUST:						buffer += "GAMEMESSAGE_TURN_SLICE_ADJUST"; break;
		case GAMEMESSAGE_ACCEPT_DEAL:							buffer += "GAMEMESSAGE_ACCEPT_DEAL"; break;
		case GAMEMESSAGE_ACCEPT_DEMAND:							buffer += "GAMEMESSAGE_ACCEPT_DEMAND"; break;
		case GAMEMESSAGE_PLAYER_FINALIZED_DEAL:					buffer += "GAMEMESSAGE_PLAYER_FINALIZED_DEAL"; break;
		case GAMEMESSAGE_PLAYER_PROPOSE_DEAL:					buffer += "GAMEMESSAGE_PLAYER_PROPOSE_DEAL"; break;
		case GAMEMESSAGE_FORCE_RESYNC:							buffer += "GAMEMESSAGE_FORCE_RESYNC"; break;
		case GAMEMESSAGE_FLUSH_MESSAGES:						buffer += "GAMEMESSAGE_FLUSH_MESSAGES"; break;
		case GAMEMESSAGE_FLUSH_MESSAGES_REPLY:					buffer += "GAMEMESSAGE_FLUSH_MESSAGES_REPLY"; break;
		case GAMEMESSAGE_SWAP_ORDER:							buffer += "GAMEMESSAGE_SWAP_ORDER"; break;
		case GAMEMESSAGE_CHANGE_PLAYER_ID:						buffer += "GAMEMESSAGE_CHANGE_PLAYER_ID"; break;
		case GAMEMESSAGE_START_LAUNCH:							buffer += "GAMEMESSAGE_START_LAUNCH"; break;
		case GAMEMESSAGE_AVOID_GROWTH:							buffer += "GAMEMESSAGE_AVOID_GROWTH"; break;
		case GAMEMESSAGE_GAME_DO_TURN_PROCESSED:				buffer += "GAMEMESSAGE_GAME_DO_TURN_PROCESSED"; break;
		case GAMEMESSAGE_DESTROY_UNIT:							buffer += "GAMEMESSAGE_DESTROY_UNIT"; break;
		case GAMEMESSAGE_HOTJOIN_START:							buffer += "GAMEMESSAGE_HOTJOIN_START"; break;
		case GAMEMESSAGE_HOTJOIN_COMPLETED:						buffer += "GAMEMESSAGE_HOTJOIN_COMPLETED"; break;
		case GAMEMESSAGE_GAME_PLAYER_INITIAL_AI_PROCESSED:		buffer += "GAMEMESSAGE_GAME_PLAYER_INITIAL_AI_PROCESSED"; break;
		case GAMEMESSAGE_RENAME_CITY:							buffer += "GAMEMESSAGE_RENAME_CITY"; break;
		case GAMEMESSAGE_RENAME_UNIT:							buffer += "GAMEMESSAGE_RENAME_UNIT"; break;
		case GAMEMESSAGE_TURN_ALL_COMPLETE:						buffer += "GAMEMESSAGE_TURN_ALL_COMPLETE"; break;
		case GAMEMESSAGE_TURN_UNREADY:							buffer += "GAMEMESSAGE_TURN_UNREADY"; break;
		case GAMEMESSAGE_FOUND_PANTHEON:						buffer += "GAMEMESSAGE_FOUND_PANTHEON"; break;
		case GAMEMESSAGE_FOUND_RELIGION:						buffer += "GAMEMESSAGE_FOUND_RELIGION"; break;
		case GAMEMESSAGE_ENHANCE_RELIGION:						buffer += "GAMEMESSAGE_ENHANCE_RELIGION"; break;
		case GAMEMESSAGE_MOVE_SPY:								buffer += "GAMEMESSAGE_MOVE_SPY"; break;
		case GAMEMESSAGE_MAYA_BONUS:							buffer += "GAMEMESSAGE_MAYA_BONUS"; break;
		case GAMEMESSAGE_FAITH_GREAT_PERSON:					buffer += "GAMEMESSAGE_FAITH_GREAT_PERSON"; break;
		case GAMEMESSAGE_STAGE_COUP:							buffer += "GAMEMESSAGE_STAGE_COUP"; break;
		case GAMEMESSAGE_FAITH_PURCHASE:						buffer += "GAMEMESSAGE_FAITH_PURCHASE"; break;
		case GAMEMESSAGE_LEAGUE_PROPOSE_ENACT:					buffer += "GAMEMESSAGE_LEAGUE_PROPOSE_ENACT"; break;
		case GAMEMESSAGE_LEAGUE_PROPOSE_REPEAL:					buffer += "GAMEMESSAGE_LEAGUE_PROPOSE_REPEAL"; break;
		case GAMEMESSAGE_ARCHAEOLOGY:							buffer += "GAMEMESSAGE_ARCHAEOLOGY"; break;
		case GAMEMESSAGE_LEAGUE_VOTE_ENACT:						buffer += "GAMEMESSAGE_LEAGUE_VOTE_ENACT"; break;
		case GAMEMESSAGE_LEAGUE_VOTE_REPEAL:					buffer += "GAMEMESSAGE_LEAGUE_VOTE_REPEAL"; break;
		case GAMEMESSAGE_GAME_OPTIONS:							buffer += "GAMEMESSAGE_GAME_OPTIONS"; break;
		case GAMEMESSAGE_IDEOLOGY:								buffer += "GAMEMESSAGE_IDEOLOGY"; break;
		case GAMEMESSAGE_GOODY_CHOICE:							buffer += "GAMEMESSAGE_GOODY_CHOICE"; break;
		case GAMEMESSAGE_LEAGUE_EDIT_NAME:						buffer += "GAMEMESSAGE_LEAGUE_EDIT_NAME"; break;
		case GAMEMESSAGE_INITIAL_INFO_COMPLETE:					buffer += "GAMEMESSAGE_INITIAL_INFO_COMPLETE"; break;
		case GAMEMESSAGE_PLAYER_REGISTER_COMPLETE:				buffer += "GAMEMESSAGE_PLAYER_REGISTER_COMPLETE"; break;
		case GAMEMESSAGE_SET_SWAPPABLE_GREAT_WORK:				buffer += "GAMEMESSAGE_SET_SWAPPABLE_GREAT_WORK"; break;
		case GAMEMESSAGE_SWAP_GREAT_WORKS:						buffer += "GAMEMESSAGE_SWAP_GREAT_WORKS"; break;
		case GAMEMESSAGE_MOVE_GREAT_WORKS:						buffer += "GAMEMESSAGE_MOVE_GREAT_WORKS"; break;
		case GAMEMESSAGE_CHANGE_IDEOLOGY:						buffer += "GAMEMESSAGE_CHANGE_IDEOLOGY"; break;
		case GAMEMESSAGE_TURN_TIMER_SYNC:						buffer += "GAMEMESSAGE_TURN_TIMER_SYNC"; break;
		case GAMEMESSAGE_LEAGUE_VOTE_ABSTAIN:					buffer += "GAMEMESSAGE_LEAGUE_VOTE_ABSTAIN"; break;
		case GAMEMESSAGE_SET_PLAYER_DESIRED_SLOT:				buffer += "GAMEMESSAGE_SET_PLAYER_DESIRED_SLOT"; break;
		default:
			buffer += szprintf("UNKNOWN_GAMEMESSAGE_%u", eType);
		}
	}
}
